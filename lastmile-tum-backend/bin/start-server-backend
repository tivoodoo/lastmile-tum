#!/usr/bin/env node

var Config = require('../config/config.js');
// Patch console.x methods in order to add timestamp information
require('console-stamp')(console, {pattern: "dd/mm/yyyy HH:MM:ss.l"});
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
var WebSocketServer = require('ws').Server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(Config.app.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer();

var wss = new WebSocketServer({
  server: server
});

server.on('request', app);

wss.on('connection', function connection(ws) {

  ws.on('message', function (message) {
    wss.clients.forEach(function(client) {
      client.send(message);
    });
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log('[BACKEND] Express server listening on port ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('[BACKEND] ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('[BACKEND] ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
